#!/bin/bash
set -e

usage() {
  cat <<EOF
Usage:

  ta             Start/attach to active Test Application
  ta start       Start Test Application, reuses existing state if it exists
  ta stop        Stop Test Application gracefully, but keep the state

  ta destroy     Stop Test Application, remove state

  ta attach      Attach to active Test Application
  ta detach      Detach Test Application from all terminals

EOF
  exit 2
}

check_deps() {
  FAIL=
  if ! tar --version >/dev/null; then
    echo "tar is required"
    FAIL=yes
  fi
  if ! curl --version >/dev/null; then
    echo "curl is required"
    FAIL=yes
  fi
  if ! tmux -V >/dev/null; then
    echo "tmux is required"
    FAIL=yes
  fi
  if ! docker --version >/dev/null; then
    echo "Docker is required"
    FAIL=yes
  fi
  if [ -n "$FAIL" ]; then
    exit 1
  fi
}

if command -v realpath >/dev/null; then
  BASE_DIR=$(dirname "$(realpath "${BASH_SOURCE[0]}")")
else
  dirpath() {
    cd "$(dirname "$1")"
    pwd -P
  }
  BASE_DIR=$(dirpath "${BASH_SOURCE[0]}")
fi

export BASE_DIR
cd "$BASE_DIR"

#
# A directory to store all state of running Test Application
#
TA_DIR="$BASE_DIR/_ta"
export TA_DATA_DIR="$TA_DIR/data"
export TA_LOG_DIR="$TA_DIR/logs"

#
# A directory for temporary files
#
: "${XDG_RUNTIME_DIR:=$TMPDIR}"
: "${XDG_RUNTIME_DIR:=/tmp}"
export TA_RUNTIME_DIR="${XDG_RUNTIME_DIR}/ta"

mkdir -p "$TA_DATA_DIR" "$TA_LOG_DIR" "$TA_RUNTIME_DIR"
mkdir -p "$TA_DATA_DIR/once"

ta_running() {
  tmux has-session -t ta 2>/dev/null
}

cmd_create() {
  if ta_running; then
    echo "Test Application is already running"
    exit 1
  fi

  export PATH="$PATH:$BASE_DIR"

  #
  # Create a new tmux session with a help message
  #
  tmux new-session -d -s ta -n help show-help

  #
  # Reassign prefix key, default Ctrl-b is used everywhere.
  #
  tmux set-option -g prefix "C-]"

  #
  # These are often hit accidentally, make them do the same
  # as their analogues without second C-
  #
  tmux bind-key "C-d" detach-client
  tmux bind-key "C-[" copy-mode
  tmux bind-key "C-n" next-window
  tmux bind-key "C-p" previous-window

  #
  # Cosmetics
  #
  tmux set-option -t ta status-style "fg=black,bg=white"
  tmux set-option -t ta status-left-length 20
  tmux set-option -t ta status-left "#[fg=white,bg=black]<Test Application>#[fg=default,bg=default] "
  tmux set-option -t ta status-right ""
  tmux set-option -t ta -g window-status-current-style "fg=white,bg=blue"
  tmux set-option -t ta -g window-status-current-format " #I:#W "
  tmux set-option -t ta -g window-status-format " #I:#W "
  tmux set-option -t ta -g window-status-separator ""

  # Run all pieces of Test Application
  local part
  for part in parts/*; do
    local filename=${part##*/} # filename without dir
    case "$filename" in
      *.disabled)
        echo "Skipping disabled $filename"
        ;;
      *.service)
        echo "Starting $filename... (run-service)"
        local name=${filename%.service}
        name=${name#*-}
        tmux new-window -n "$name" -d "run-service $filename $name $part"
        ;;
      *.once)
        echo "Starting $filename... (run-once)"
        local name=${filename%.once}
        name=${name#*-}
        tmux new-window -n "$name" -d "run-once $filename $name $part"
        ;;
      *.destroy)
        # Skipping destroy parts
        ;;
      *)
        echo "Unexpected part: $part, not .service or .once, not disabled"
        exit 1
        ;;
    esac
  done
}

cmd_dwim() {
  if ta_running; then
    cmd_attach
  else
    cmd_start
  fi
}

cmd_start() {
  cmd_create
  cmd_attach
}

cmd_stop() {
  tmux kill-session -t ta
}

cmd_detach() {
  tmux detach-client -s ta
}

cmd_destroy() {
  cmd_stop || :

  shopt -s nullglob
  local part
  for part in parts/*.destroy; do
    "$part"
  done

  rm -r "$TA_DIR"
}

cmd_attach() {
  exec tmux attach-session -d -t ta
}

CMD="$1"
shift || :

check_deps

case "$CMD" in
  create) cmd_create;;
  "") cmd_dwim;;
  start) cmd_start;;
  stop) cmd_stop;;
  destroy) cmd_destroy;;
  attach) cmd_attach;;
  detach) cmd_detach;;
  *) usage;;
esac
